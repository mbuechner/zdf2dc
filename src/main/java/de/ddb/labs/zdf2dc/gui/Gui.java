/*
 * Copyright 2019-2021 Michael Büchner <m.buechner@dnb.de>, Deutsche Digitale Bibliothek
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package de.ddb.labs.zdf2dc.gui;

import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import de.ddb.labs.zdf2dc.data.rdfdc.RdfDocumentProcessor;
import de.ddb.labs.zdf2dc.data.rdfdc.ZdfRdfRecord;
import de.ddb.labs.zdf2dc.data.rdfdc.ZdfRdfRecordList;
import java.awt.event.WindowEvent;
import java.io.File;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.nio.charset.Charset;
import java.util.TreeSet;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.logging.Level;
import java.util.prefs.Preferences;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import okhttp3.Call;
import okhttp3.Callback;
import okhttp3.Dispatcher;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.Response;
import okhttp3.ResponseBody;
import okio.BufferedSink;
import okio.Okio;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Gui extends javax.swing.JFrame {

    private final static int CONNECTTIMEOUT = 10;
    private final static int WRITETIMEOUT = 10;
    private final static int READTIMEOUT = 30;
    private final OkHttpClient client;
    private final JsonFactory factory;
    private final ObjectMapper mapper;
    private final static Logger LOG = LoggerFactory.getLogger(Gui.class);
    private final DataDownloader downloader;
    private final Preferences userPrefs;

    /**
     * Creates new form Gui
     *
     * @throws java.lang.InterruptedException
     * @throws java.io.IOException
     */
    public Gui() throws InterruptedException, IOException {
        this.client = new OkHttpClient.Builder()
                .connectTimeout(CONNECTTIMEOUT, TimeUnit.SECONDS)
                .writeTimeout(WRITETIMEOUT, TimeUnit.SECONDS)
                .readTimeout(READTIMEOUT, TimeUnit.SECONDS)
                .build();
        this.factory = new JsonFactory();
        this.mapper = new ObjectMapper(factory);
        this.userPrefs = Preferences.userRoot().node("de/ddb/labs/zdf2dc");
        this.downloader = new DataDownloader();
        initComponents();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jTextField2 = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();

        jPanel2 = new javax.swing.JPanel();
        jTextField1 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jCheckBox2 = new javax.swing.JCheckBox();
        jCheckBox1 = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("ZDF2DC");
        setMinimumSize(new java.awt.Dimension(1000, 625));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Suche"));

        jTextField2.setText("Momente der Geschichte");

        jButton2.setText("Suchen");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id", "Titel"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable2.setShowGrid(true);
        jScrollPane4.setViewportView(jTable2);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane4)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jTextField2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Konvertierung"));

        jButton1.setText("Hinzufügen");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jTextField1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addContainerGap())
        );

        jButton3.setText("Download & Konvertierung");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("->");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setText("<-");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Statistik"));

        jLabel1.setText("Suchttreffer:");

        jLabel3.setText("Verarbeitet:");

        jLabel5.setText("Statistik:");

        jLabel6.setText("-");

        jLabel2.setText("0/0");

        jLabel4.setText("0/0");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(11, 11, 11))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12))
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Optionen"));

        jCheckBox2.setSelected(true);
        jCheckBox2.setText("Nur einen DC-Datensatz erzeugen");
        jCheckBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox2ActionPerformed(evt);
            }
        });

        jCheckBox1.setText("JSON-Daten speichern");
        jCheckBox1.setEnabled(false);
        jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jCheckBox2)
                    .addComponent(jCheckBox1))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jCheckBox2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBox1)
                .addContainerGap(28, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, 206, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(190, 190, 190)
                        .addComponent(jButton4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton5)
                        .addGap(0, 239, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(9, 9, 9)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed

        jButton2.setEnabled(false);
        final DefaultTableModel model = (DefaultTableModel) jTable2.getModel();
        model.setRowCount(0);
        String url = "";
        try {
            url = URLEncoder.encode(jTextField2.getText(), "UTF-8");
        } catch (UnsupportedEncodingException ex) {
            LOG.error("{}", ex.getMessage(), ex);
            JOptionPane.showMessageDialog(null, "Download konnte nicht abgeschlossen werden!\n" + ex.getMessage(), "Fehler", JOptionPane.WARNING_MESSAGE);
            return;
        }
        nextRequest("/search/documents?q=" + url + "&sender=ZDF&hasVideo=true&embeddingPossible=true&visible=true&contentTypes=clip");
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        final int[] selectedRows = jTable2.getSelectedRows();
        final DefaultTableModel model2 = (DefaultTableModel) jTable2.getModel();
        final DefaultTableModel model1 = (DefaultTableModel) jTable1.getModel();

        final TreeSet<String> set = new TreeSet<>();

        for (int i = 0; i < model1.getRowCount(); ++i) {
            set.add((String) model1.getValueAt(i, 0));
        }

        for (int i = 0; i < selectedRows.length; ++i) {
            set.add((String) model2.getValueAt(selectedRows[i], 0));
        }

        model1.setRowCount(0);

        for (String s : set) {
            model1.addRow(new String[]{s});
        }

    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        final int[] selectedRows = jTable1.getSelectedRows();
        final DefaultTableModel model1 = (DefaultTableModel) jTable1.getModel();

        for (int i = selectedRows.length; i > 0; --i) {
            model1.removeRow(selectedRows[i - 1]);
        }
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed

        final DefaultTableModel model1 = (DefaultTableModel) jTable1.getModel();
        if (model1.getRowCount() <= 0) {
            return;
        }

        final JFileChooser fileChooserSave = new JFileChooser();
        fileChooserSave.setDialogTitle("Speichern");
        File file;
        if (jCheckBox2.isSelected()) {
            fileChooserSave.setFileSelectionMode(JFileChooser.FILES_ONLY);
            fileChooserSave.setFileFilter(new FileNameExtensionFilter("XML-Datei (*.xml)", "xml"));
            if (fileChooserSave.showSaveDialog(this) != JFileChooser.APPROVE_OPTION) {
                return;
            } else {
                String filename = fileChooserSave.getSelectedFile().toString();
                if (!filename.endsWith(".xml")) {
                    filename += ".xml";
                }
                file = new File(filename);
            }

        } else {
            fileChooserSave.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
            if (fileChooserSave.showOpenDialog(this) != JFileChooser.APPROVE_OPTION) {
                return;
            }
            file = fileChooserSave.getSelectedFile();
        }
        LOG.info("Save files to {}", file.getAbsolutePath());
        downloader.reset();
        jButton3.setEnabled(false);

        final boolean allToOneFile = jCheckBox2.isSelected();
        final boolean keepJson = jCheckBox1.isSelected();

        for (int i = 0; i < model1.getRowCount(); ++i) {

            final String id = ((String) model1.getValueAt(i, 0));
            if (allToOneFile) {
                downloader.addDownloadJob(id, file);
                LOG.info("Save DC dataset {} to file {}", id, file.getAbsolutePath());
            } else {

                final File f = new File(file.getAbsolutePath() + File.separator + id.replaceAll("[^a-zA-Z0-9\\.\\-]", "_") + ".xml");
                downloader.addDownloadJob(id, f, keepJson);
                LOG.info("Save DC file {} to directory {}", id, f.getAbsolutePath());
            }
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        String urlTmp = "";
        try {
            urlTmp = URLEncoder.encode(jTextField1.getText(), "UTF-8");
        } catch (UnsupportedEncodingException ex) {
            LOG.error("{}", ex.getMessage(), ex);
            JOptionPane.showMessageDialog(null, "Download konnte nicht abgeschlossen werden!\n" + ex.getMessage(), "Fehler", JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        final String url = urlTmp;

        final Request request = new Request.Builder()
                .url("https://api.zdf.de/content/documents/" + url + ".json")
                .head()
                .addHeader("Api-Auth", "Bearer " + userPrefs.get("ZDFAPIKEY", ""))
                .build();

        client.newCall(request).enqueue(new Callback() {
            @Override
            public void onFailure(Call call, IOException e) {
                JOptionPane.showMessageDialog(null, "\"" + url + "\" ist keine gültige ID.\n" + e.getMessage(), "Fehler", JOptionPane.ERROR_MESSAGE);
            }

            @Override
            public void onResponse(Call call, Response response) throws IOException {
                if (!response.isSuccessful()) {
                    JOptionPane.showMessageDialog(null, "\"" + url + "\" ist keine gültige ID.\nResponse code: " + response.code(), "Fehler", JOptionPane.ERROR_MESSAGE);
                    return;
                }

                final DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
                final TreeSet<String> set = new TreeSet<>();

                for (int i = 0; i < model.getRowCount(); ++i) {
                    set.add((String) model.getValueAt(i, 0));
                }

                model.setRowCount(0);
                set.add(url);

                for (String s : set) {
                    model.addRow(new String[]{s});
                }
                jTextField1.setText("");
            }
        });
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCheckBox1ActionPerformed

    private void jCheckBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox2ActionPerformed
        if (jCheckBox2.isSelected()) {
            jCheckBox1.setEnabled(false);
            jCheckBox1.setSelected(false);
        } else {
            jCheckBox1.setEnabled(true);
        }
    }//GEN-LAST:event_jCheckBox2ActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened

        boolean again = true;
        do {
            final Request request = new Request.Builder()
                    .url("https://api.zdf.de/content/feed/current")
                    .head()
                    .addHeader("Api-Auth", "Bearer " + userPrefs.get("ZDFAPIKEY", ""))
                    .build();

            try (final Response response = client.newCall(request).execute()) {

                if (!response.isSuccessful()) {
                    final String s = (String) JOptionPane.showInputDialog(
                            null,
                            "Bitte einen gültigen API-Key für https://api.zdf.de/ eingeben:",
                            "ZDF-API-Key",
                            JOptionPane.QUESTION_MESSAGE,
                            null,
                            null,
                            userPrefs.get("ZDFAPIKEY", ""));
                    // cancel -> close app
                    if (s == null) {
                        dispatchEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));
                    } else {
                        userPrefs.put("ZDFAPIKEY", s);
                    }
                } else {
                    again = false;
                }
            } catch (IOException ex) {
                LOG.error("API-Key konnte nicht überprüft werden. {}", ex.getMessage());
                JOptionPane.showMessageDialog(null, "API-Key konnte nicht überprüft werden.\n" + ex.getMessage(), "Fehler", JOptionPane.WARNING_MESSAGE);
            }
        } while (again);

    }//GEN-LAST:event_formWindowOpened

    private void nextRequest(String url) {
        final Request request = new Request.Builder()
                .url("https://api.zdf.de" + url)
                .addHeader("Api-Auth", "Bearer " + userPrefs.get("ZDFAPIKEY", ""))
                .build();

        client.newCall(request).enqueue(new Callback() {
            @Override
            public void onFailure(Call call, IOException e) {
                JOptionPane.showMessageDialog(null, e.getMessage(), "Fehler", JOptionPane.ERROR_MESSAGE);
            }

            @Override
            public void onResponse(Call call, Response response) throws IOException {
                try ( ResponseBody responseBody = response.body()) {
                    if (!response.isSuccessful() || responseBody == null) {
                        throw new IOException("Ungültige Antwort vom Server.\n" + response);
                    }

                    final JsonNode rootNode = mapper.readTree(responseBody.byteStream());
                    final int totalResultsCount = rootNode.get("totalResultsCount").asInt(0);

                    if (totalResultsCount == 0) {
                        JOptionPane.showMessageDialog(null, "Zu dem Suchbegriff wurde nichts gefunden!", "0 Treffer", JOptionPane.INFORMATION_MESSAGE);
                        jButton2.setEnabled(true);
                        return;
                    }
                    final DefaultTableModel model = (DefaultTableModel) jTable2.getModel();

                    synchronized (model) {
                        final JsonNode resultsArray = rootNode.get("http://zdf.de/rels/search/results");
                        if (resultsArray.isArray()) {
                            for (JsonNode jsonNode : resultsArray) {
                                String id = "";
                                String title = "";
                                try {
                                    id = jsonNode.get("id").asText("");
                                    title = jsonNode.get("http://zdf.de/rels/target").get("teaserHeadline").asText("");
                                } catch (Exception e) {
                                    LOG.warn("Error parsing JSON. {}", e.getMessage());
                                } finally {
                                    if (!id.trim().isEmpty()) {
                                        model.addRow(new String[]{id, title});
                                    }
                                }
                                int[] selectedRows = jTable2.getSelectedRows();
                                model.fireTableDataChanged();
                                for (int i = 0; i < selectedRows.length; i++) {
                                    jTable2.getSelectionModel().addSelectionInterval(selectedRows[i], selectedRows[i]);
                                }
                                jLabel2.setText(model.getRowCount() + "/" + totalResultsCount);
                            }
                        }

                        final TreeSet<String> set = new TreeSet<>();
                        // save selcted Rows

                        for (int i = 0; i < model.getRowCount(); ++i) {
                            set.add((String) model.getValueAt(i, 0));
                        }

                        jLabel6.setText(model.getRowCount() + " IDs geladen, " + (model.getRowCount() - set.size()) + " sind Dupletten");
                    }

                    if (rootNode.has("next")) {
                        nextRequest(rootNode.get("next").asText());
                    } else {
                        jButton2.setEnabled(true);
                    }

                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, e.getMessage(), "Fehler", JOptionPane.ERROR_MESSAGE);
                    jButton2.setEnabled(true);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JCheckBox jCheckBox2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    // End of variables declaration//GEN-END:variables

    public class DataDownloader {

        private final static int MAX_REQUESTS = 10;
        private final static int MAX_REQUESTS_PER_HOST = 5;
        private final static int CONNECTTIMEOUT = 10;
        private final static int WRITETIMEOUT = 10;
        private final static int READTIMEOUT = 30;
        private final OkHttpClient client;
        private AtomicInteger totalCount, count;
        private final TreeSet<String> errorDownloads;
        private final ZdfRdfRecordList list;

        public DataDownloader() throws InterruptedException, IOException {
            final Dispatcher dispatcher = new Dispatcher();
            dispatcher.setMaxRequests(MAX_REQUESTS);
            dispatcher.setMaxRequestsPerHost(MAX_REQUESTS_PER_HOST);

            this.client = new OkHttpClient.Builder()
                    .connectTimeout(CONNECTTIMEOUT, TimeUnit.SECONDS)
                    .writeTimeout(WRITETIMEOUT, TimeUnit.SECONDS)
                    .readTimeout(READTIMEOUT, TimeUnit.SECONDS)
                    .dispatcher(dispatcher)
                    .build();

            this.totalCount = new AtomicInteger(0);
            this.count = new AtomicInteger(0);
            this.errorDownloads = new TreeSet<>();
            this.list = new ZdfRdfRecordList();
        }

        public synchronized void reset() {
            totalCount = new AtomicInteger(0);
            count = new AtomicInteger(0);
            errorDownloads.clear();
            list.clear();
        }

        public String truncateAfterWords(int n, String str) {
            return str.replaceAll("^((?:\\W*\\w+){" + n + "}).*$", "$1");
        }

        public synchronized void addDownloadJob(String id, File saveAllToOneFile) {

            totalCount.incrementAndGet();
            jLabel4.setText(count.get() + "/" + totalCount.get());

            final Request request = new Request.Builder()
                    .url("https://api.zdf.de/content/documents/" + id + ".json")
                    .addHeader("Api-Auth", "Bearer " + userPrefs.get("ZDFAPIKEY", ""))
                    .build();

            final Call call = client.newCall(request);
            call.enqueue(new Callback() {

                @Override
                public void onFailure(Call call, IOException e) {
                    count.incrementAndGet();
                    errorDownloads.add(id);
                    LOG.error("{}: {}", id, e.getMessage());
                    done(saveAllToOneFile);
                }

                @Override
                public void onResponse(Call call, Response response) {
                    count.incrementAndGet();

                    try {
                        final File saveToJsonFile = File.createTempFile("zdf2dc-", ".json");
                        final BufferedSink sink = Okio.buffer(Okio.sink(saveToJsonFile));
                        sink.writeAll(response.body().source());
                        sink.close();

                        final ZdfRdfRecord record = RdfDocumentProcessor.process(saveToJsonFile);
                        list.getList().add(record);

                        if (!saveToJsonFile.delete()) {
                            LOG.warn("Konnte temporäre Datei {} nicht löschen.", saveToJsonFile.getAbsolutePath());
                        }

                    } catch (Exception ex) {
                        LOG.error("{}: {}", id, ex.getMessage());
                        errorDownloads.add(id);
                    }
                    done(saveAllToOneFile);
                }

                private synchronized void done(File saveAllToOneFile) {
                    jLabel4.setText(count.get() + "/" + totalCount.get() + " (" + errorDownloads.size() + " Fehler)");
                    if (count.get() == totalCount.get() && client.dispatcher().queuedCallsCount() == 0) {

                        if (saveAllToOneFile == null) {
                            LOG.error("saveAllToOneFile is null");
                            return;
                        }
                        try {
                            RdfDocumentProcessor.save(list, saveAllToOneFile);
                        } catch (IOException ex) {
                            LOG.error("{} konnte nicht gespeichert werden. {}", saveAllToOneFile.getAbsolutePath(), ex.getMessage());
                            JOptionPane.showMessageDialog(null, "Download konnte nicht abgeschlossen werden!\n" + truncateAfterWords(10, ex.getMessage()), "Fehler", JOptionPane.WARNING_MESSAGE);
                            return;
                        } finally {

                            jButton3.setEnabled(true);

                            final DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
                            model.setRowCount(0);
                            for (String s : errorDownloads) {
                                model.addRow(new String[]{s});
                            }
                        }

                        JOptionPane.showMessageDialog(null, "Download ist abgeschlossen! Es gab " + errorDownloads.size() + " Fehler.", "Fertig", JOptionPane.INFORMATION_MESSAGE);
                    }
                }
            });
        }

        public synchronized void addDownloadJob(String id, File saveToFile, boolean keepOriginal) {
            totalCount.incrementAndGet();
            jLabel4.setText(count.get() + "/" + totalCount.get());

            final Request request = new Request.Builder()
                    .url("https://api.zdf.de/content/documents/" + id + ".json")
                    .addHeader("Api-Auth", "Bearer " + userPrefs.get("ZDFAPIKEY", ""))
                    .build();

            final Call call = client.newCall(request);
            call.enqueue(new Callback() {

                @Override
                public void onFailure(Call call, IOException e) {
                    count.incrementAndGet();
                    errorDownloads.add(id);
                    LOG.error("{}: {}", saveToFile.getName(), e.getMessage());
                    done();
                }

                @Override
                public void onResponse(Call call, Response response) {
                    count.incrementAndGet();
                    String jsonFileName = saveToFile.getAbsolutePath().replace(".xml", ".json");
                    if (!jsonFileName.endsWith(".json")) {
                        jsonFileName += ".json";
                    }
                    final File saveToJsonFile = new File(jsonFileName);

                    try (final BufferedSink sink = Okio.buffer(Okio.sink(saveToJsonFile))) {
                        sink.writeAll(response.body().source());
                        sink.close();

                        final ZdfRdfRecord record = RdfDocumentProcessor.process(saveToJsonFile);
                        list.getList().add(record);
                        RdfDocumentProcessor.save(record, saveToFile);

                        if (!keepOriginal) {

                            if (!saveToJsonFile.delete()) {
                                LOG.warn("Konnte temporäre Datei {} nicht löschen.", saveToJsonFile.getAbsolutePath());
                            }
                        }

                    } catch (Exception ex) {
                        LOG.error("{}: {}", saveToJsonFile.getAbsolutePath(), ex.getLocalizedMessage());
                        errorDownloads.add(id);
                    }
                    done();
                }

                private synchronized void done() {
                    jLabel4.setText(count.get() + "/" + totalCount.get() + " (" + errorDownloads.size() + " Fehler)");
                    if (count.get() == totalCount.get() && client.dispatcher().queuedCallsCount() == 0) {

                        jButton3.setEnabled(true);

                        final DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
                        model.setRowCount(0);
                        for (String s : errorDownloads) {
                            model.addRow(new String[]{s});
                        }

                        if (errorDownloads.size() > 0) {
                            JOptionPane.showMessageDialog(null, "Download mit Fehlern abgeschlossen! Es gab " + errorDownloads.size() + " Fehler.", "Fertig", JOptionPane.WARNING_MESSAGE);
                        } else {
                            JOptionPane.showMessageDialog(null, "Download ist abgeschlossen! Es gab " + errorDownloads.size() + " Fehler.", "Fertig", JOptionPane.INFORMATION_MESSAGE);
                        }
                    }
                }

            });
        }
    }
}
